// src/test/java/com/tfgproject/CompleteVerificationTest.java
package com.tfgproject;

import com.tfgproject.domain.model.MessageStatus;
import com.tfgproject.domain.service.MessageStatusService;
import com.tfgproject.infrastructure.service.AsyncMessagePublisher;
import com.tfgproject.infrastructure.service.AsyncScheduledMessageProcessor;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@SpringBootTest
public class CompleteVerificationTest {

    @Autowired
    private AsyncMessagePublisher messagePublisher;

    @Autowired
    private MessageStatusService messageStatusService;

    @Autowired
    private AsyncScheduledMessageProcessor scheduledProcessor;

    @Test
    public void testCompleteVerificationWithScheduled() throws InterruptedException {
        System.out.println("üéØ === VERIFICACI√ìN COMPLETA: SOLO 1 SMS PROGRAMADO ===");
        System.out.println("üí∞ (Ahorrando dinero - solo SMS programado para probar funcionalidad)");

        LocalDateTime now = LocalDateTime.now();
        String testSuffix = now.toString().substring(11, 19); // HH:MM:SS

        System.out.println("\nüìä ESTADO INICIAL DEL SISTEMA:");
        long initialPending = messageStatusService.getPendingMessageCount();
        long initialFailed = messageStatusService.getFailedMessageCount();
        int initialScheduled = scheduledProcessor.getScheduledMessageCount();

        System.out.println("  ‚è≥ Mensajes pendientes: " + initialPending);
        System.out.println("  ‚ùå Mensajes fallidos: " + initialFailed);
        System.out.println("  üìÖ Mensajes programados: " + initialScheduled);

        System.out.println("\nüì§ ENVIANDO MENSAJES DE PRUEBA (" + testSuffix + "):");

        // === 1. EMAIL INMEDIATO ===
        String emailId = messagePublisher.sendEmailToQueue(
                "bax6351@gmail.com",
                "üìß Verificaci√≥n Email Inmediato #" + testSuffix,
                "Email de verificaci√≥n inmediato enviado a las " + testSuffix + "\n\n" +
                        "Este email confirma que el sistema de email funciona correctamente."
        );
        System.out.println("1Ô∏è‚É£ ‚úÖ Email inmediato enviado: " + emailId);

        // === 2. EMAIL PROGRAMADO (1 minuto) ===
        LocalDateTime emailScheduledTime = now.plusMinutes(1);
        String scheduledEmailId = messagePublisher.scheduleMessage(
                "bax6351@gmail.com",
                "‚è∞ Email Programado #" + testSuffix,
                "Este email fue programado a las " + now.toString().substring(11, 19) +
                        " para enviarse a las " + emailScheduledTime.toString().substring(11, 19) + "\n\n" +
                        "Si recibes este email, la programaci√≥n funciona perfectamente!",
                emailScheduledTime
        );
        System.out.println("2Ô∏è‚É£ ‚è∞ Email programado para: " + emailScheduledTime.toString().substring(11, 19));
        System.out.println("    ID: " + scheduledEmailId);

        // === 3. SMS PROGRAMADO (45 segundos) - √öNICO SMS ===
        LocalDateTime smsScheduledTime = now.plusSeconds(45);
        String scheduledSmsId = messagePublisher.scheduleSms(
                "644023859",                                                    // to
                "SMS programado TFG " + testSuffix + " - Enviado automaticamente!", // content
                "TFG-App",                                                      // sender
                smsScheduledTime
        );
        System.out.println("3Ô∏è‚É£ üì± SMS programado para: " + smsScheduledTime.toString().substring(11, 19));
        System.out.println("    ID: " + scheduledSmsId);
        System.out.println("    üí∞ (Este es el √öNICO SMS - ahorra dinero)");

        // === 4. DIFUSI√ìN SOLO EMAIL (sin SMS para ahorrar) ===
        String broadcastId = messagePublisher.sendEmailToQueue(
                "bax6351@gmail.com",
                "üì¢ Verificaci√≥n Difusi√≥n #" + testSuffix,
                "Este email simula una difusi√≥n (sin SMS para ahorrar dinero)\n\n" +
                        "En producci√≥n, esto llegar√≠a a m√∫ltiples destinatarios por email y SMS."
        );
        System.out.println("4Ô∏è‚É£ üì¢ Difusi√≥n (solo email) enviada: " + broadcastId);

        System.out.println("\n‚è≥ Esperando procesamiento inicial (5 segundos)...");
        TimeUnit.SECONDS.sleep(5);

        // === VERIFICAR ESTADOS INMEDIATOS ===
        System.out.println("\nüìä VERIFICANDO ESTADOS INMEDIATOS:");

        Optional<MessageStatus> emailStatus = messageStatusService.getMessageStatus(emailId);
        Optional<MessageStatus> scheduledEmailStatus = messageStatusService.getMessageStatus(scheduledEmailId);
        Optional<MessageStatus> scheduledSmsStatus = messageStatusService.getMessageStatus(scheduledSmsId);
        Optional<MessageStatus> broadcastStatus = messageStatusService.getMessageStatus(broadcastId);

        System.out.println("1Ô∏è‚É£ Email inmediato: " +
                (emailStatus.isPresent() ? emailStatus.get().getStatus() : "‚ùå NO ENCONTRADO"));
        System.out.println("2Ô∏è‚É£ Email programado: " +
                (scheduledEmailStatus.isPresent() ? scheduledEmailStatus.get().getStatus() : "‚ùå NO ENCONTRADO"));
        System.out.println("3Ô∏è‚É£ SMS programado: " +
                (scheduledSmsStatus.isPresent() ? scheduledSmsStatus.get().getStatus() : "‚ùå NO ENCONTRADO"));
        System.out.println("4Ô∏è‚É£ Difusi√≥n email: " +
                (broadcastStatus.isPresent() ? broadcastStatus.get().getStatus() : "‚ùå NO ENCONTRADO"));

        // === ESTAD√çSTICAS ACTUALES ===
        System.out.println("\nüìà ESTAD√çSTICAS ACTUALES:");
        long currentPending = messageStatusService.getPendingMessageCount();
        long currentFailed = messageStatusService.getFailedMessageCount();
        int currentScheduled = scheduledProcessor.getScheduledMessageCount();

        System.out.println("  ‚è≥ Mensajes pendientes: " + currentPending);
        System.out.println("  ‚ùå Mensajes fallidos: " + currentFailed);
        System.out.println("  üìÖ Mensajes programados: " + currentScheduled);
        System.out.println("  üìä Incremento programados: +" + (currentScheduled - initialScheduled));

        // === ESPERAR LOS MENSAJES PROGRAMADOS ===
        System.out.println("\n‚è∞ MONITOREANDO MENSAJES PROGRAMADOS...");
        System.out.println("üì± SMS programado llegar√° en ~40 segundos");
        System.out.println("üìß Email programado llegar√° en ~55 segundos");
        System.out.println("\nüîç Monitoreando cada 15 segundos:");

        for (int i = 1; i <= 6; i++) { // 6 √ó 15s = 90 segundos total
            TimeUnit.SECONDS.sleep(15);

            LocalDateTime currentTime = LocalDateTime.now();
            long secondsElapsed = java.time.Duration.between(now, currentTime).getSeconds();
            int scheduledCount = scheduledProcessor.getScheduledMessageCount();

            boolean smsTime = secondsElapsed >= 45;
            boolean emailTime = secondsElapsed >= 60;

            System.out.printf("üïê +%02ds | Programados: %d | SMS: %s | Email: %s\n",
                    secondsElapsed,
                    scheduledCount,
                    smsTime ? "‚úÖ DEBER√çA ENVIARSE" : "‚è≥ Esperando",
                    emailTime ? "‚úÖ DEBER√çA ENVIARSE" : "‚è≥ Esperando"
            );

            // Verificar si los mensajes se enviaron (salieron del scheduler)
            if (scheduledCount < currentScheduled) {
                System.out.println("   üöÄ ¬°Algunos mensajes programados se enviaron!");
            }
        }

        // === VERIFICACI√ìN FINAL ===
        System.out.println("\nüéØ VERIFICACI√ìN FINAL:");

        long finalPending = messageStatusService.getPendingMessageCount();
        long finalFailed = messageStatusService.getFailedMessageCount();
        int finalScheduled = scheduledProcessor.getScheduledMessageCount();

        System.out.println("üìä ESTAD√çSTICAS FINALES:");
        System.out.println("  ‚è≥ Mensajes pendientes: " + finalPending);
        System.out.println("  ‚ùå Mensajes fallidos: " + finalFailed);
        System.out.println("  üìÖ Mensajes programados restantes: " + finalScheduled);

        // === RESUMEN DE ENTREGA ESPERADA ===
        System.out.println("\nüì± RESUMEN - QU√â DEBER√çAS RECIBIR:");
        System.out.println("üìß EN TU EMAIL (bax6351@gmail.com):");
        System.out.println("  1Ô∏è‚É£ ‚úÖ Verificaci√≥n Email Inmediato #" + testSuffix + " (YA lleg√≥)");
        System.out.println("  2Ô∏è‚É£ ‚è∞ Email Programado #" + testSuffix + " (lleg√≥ en 1 minuto)");
        System.out.println("  3Ô∏è‚É£ üì¢ Verificaci√≥n Difusi√≥n #" + testSuffix + " (YA lleg√≥)");
        System.out.println("\nüì± EN TU M√ìVIL (644023859):");
        System.out.println("  1Ô∏è‚É£ üì± SMS Programado TFG " + testSuffix + " (lleg√≥ en 45s)");

        System.out.println("\nüí∞ TOTAL COSTO SMS: 1 mensaje (solo el programado)");
        System.out.println("üìß TOTAL EMAILS: 3 mensajes (todos gratis)");

        System.out.println("\n‚úÖ TEST DE VERIFICACI√ìN COMPLETADO!");
        System.out.println("üîç Cuenta los mensajes recibidos y compara con lo esperado arriba");

        // Assertions b√°sicas
        assert emailStatus.isPresent() : "Email inmediato deber√≠a tener status";
        assert scheduledEmailStatus.isPresent() : "Email programado deber√≠a tener status";
        assert scheduledSmsStatus.isPresent() : "SMS programado deber√≠a tener status";
        assert currentScheduled >= initialScheduled : "Deber√≠an haberse programado mensajes";
    }

    @Test
    public void testSystemStatistics() {
        System.out.println("üìà === ESTAD√çSTICAS COMPLETAS DEL SISTEMA ===");

        // Obtener todos los mensajes
        List<MessageStatus> allMessages = messageStatusService.getUserMessageHistory("currentUser", 7);

        System.out.println("üìä RESUMEN GENERAL:");
        System.out.println("  üìã Total mensajes registrados: " + allMessages.size());

        if (allMessages.isEmpty()) {
            System.out.println("  ‚ÑπÔ∏è No hay mensajes en el sistema a√∫n");
            return;
        }

        // Agrupar por tipo
        Map<String, Long> typeCount = allMessages.stream()
                .collect(Collectors.groupingBy(
                        MessageStatus::getType,
                        Collectors.counting()
                ));

        System.out.println("\nüìä POR TIPO DE MENSAJE:");
        typeCount.forEach((type, count) ->
                System.out.println("  " + getTypeIcon(type) + " " + type + ": " + count));

        // Agrupar por estado
        Map<String, Long> statusCount = allMessages.stream()
                .collect(Collectors.groupingBy(
                        m -> m.getStatus().name(),
                        Collectors.counting()
                ));

        System.out.println("\nüìä POR ESTADO:");
        statusCount.forEach((status, count) ->
                System.out.println("  " + getStatusIcon(status) + " " + status + ": " + count));

        // √öltimos 10 mensajes
        System.out.println("\nüìã √öLTIMOS 10 MENSAJES:");
        allMessages.stream()
                .sorted((a, b) -> b.getTimestamp().compareTo(a.getTimestamp()))
                .limit(10)
                .forEach(m -> System.out.println(
                        "  " + getTypeIcon(m.getType()) + " " +
                                m.getRecipient() + " ‚Üí " +
                                getStatusIcon(m.getStatus().name()) + " " + m.getStatus() +
                                " (" + m.getTimestamp().toString().substring(11, 19) + ")"
                ));

        // Estad√≠sticas de rendimiento
        long pending = messageStatusService.getPendingMessageCount();
        long failed = messageStatusService.getFailedMessageCount();
        int scheduled = scheduledProcessor.getScheduledMessageCount();

        System.out.println("\n‚ö° ESTADO ACTUAL DEL SISTEMA:");
        System.out.println("  ‚è≥ Pendientes de procesar: " + pending);
        System.out.println("  ‚ùå Fallidos: " + failed);
        System.out.println("  üìÖ Programados para el futuro: " + scheduled);

        double successRate = allMessages.isEmpty() ? 0 :
                (double) allMessages.stream()
                        .filter(m -> m.getStatus().name().equals("SENT") || m.getStatus().name().equals("DELIVERED"))
                        .count() * 100.0 / allMessages.size();

        System.out.println("  üìä Tasa de √©xito: " + String.format("%.1f%%", successRate));

        System.out.println("\n‚úÖ Estad√≠sticas del sistema completadas");
    }

    @Test
    public void testSchedulerStatus() {
        System.out.println("‚è∞ === ESTADO DEL SCHEDULER ===");

        int scheduledCount = scheduledProcessor.getScheduledMessageCount();
        System.out.println("üìÖ Mensajes programados activos: " + scheduledCount);

        if (scheduledCount > 0) {
            System.out.println("‚úÖ Scheduler activo con mensajes pendientes");
            System.out.println("üîç Los mensajes se enviar√°n autom√°ticamente en su momento programado");
        } else {
            System.out.println("üí§ Scheduler activo sin mensajes programados");
        }

        System.out.println("‚öôÔ∏è El scheduler verifica mensajes cada 30 segundos");
        System.out.println("‚úÖ Estado del scheduler verificado");
    }

    @Test
    public void testQuickEmailOnly() {
        System.out.println("üìß === TEST R√ÅPIDO SOLO EMAIL (GRATIS) ===");

        LocalDateTime now = LocalDateTime.now();
        String suffix = now.toString().substring(14, 19); // MM:SS

        String emailId = messagePublisher.sendEmailToQueue(
                "bax6351@gmail.com",
                "‚ö° Test R√°pido #" + suffix,
                "Email de prueba r√°pida enviado a las " + now.toString().substring(11, 19) + "\n\n" +
                        "Este es un test simple para verificar que el email funciona sin gastar en SMS."
        );

        System.out.println("üìß Email enviado: " + emailId);
        System.out.println("‚úÖ Revisa tu email: bax6351@gmail.com");
        System.out.println("üí∞ Costo: $0 (email gratuito)");

        assert emailId != null : "Email deber√≠a enviarse correctamente";
    }

    // M√©todos auxiliares para iconos
    private String getTypeIcon(String type) {
        return switch (type) {
            case "EMAIL" -> "üìß";
            case "SMS" -> "üì±";
            case "BROADCAST" -> "üì¢";
            default -> "üìù";
        };
    }

    private String getStatusIcon(String status) {
        return switch (status) {
            case "QUEUED" -> "‚è≥";
            case "PROCESSING" -> "üîÑ";
            case "SENT" -> "‚úÖ";
            case "DELIVERED" -> "üì¨";
            case "FAILED" -> "‚ùå";
            case "SCHEDULED" -> "üìÖ";
            default -> "‚ùì";
        };
    }
}