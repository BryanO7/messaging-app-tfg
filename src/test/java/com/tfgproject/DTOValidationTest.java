// src/test/java/com/tfgproject/DTOValidationTest.java
package com.tfgproject;

import com.tfgproject.application.dto.request.ContactRequest;
import com.tfgproject.application.dto.request.CategoryRequest;
import com.tfgproject.application.dto.request.CategoryMessageRequest;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestPropertySource;

import java.util.Set;

@SpringBootTest
@TestPropertySource(locations = "classpath:application-test.properties") // ‚úÖ Usar perfil de test
public class DTOValidationTest {

    private Validator validator;

    @BeforeEach
    public void setUp() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    public void testContactRequestValidations() {
        System.out.println("üß™ === TEST VALIDACIONES ContactRequest ===");

        // === TEST 1: ContactRequest v√°lido (EMAILS Y M√ìVIL REALES) ===
        ContactRequest validContact = new ContactRequest();
        validContact.setName("Juan P√©rez");
        validContact.setEmail("rybantfg@gmail.com"); // ‚úÖ Email real
        validContact.setPhone("644023859"); // ‚úÖ M√≥vil real espa√±ol
        validContact.setNotes("Contacto de prueba");

        Set<ConstraintViolation<ContactRequest>> violations = validator.validate(validContact);
        System.out.println("‚úÖ ContactRequest v√°lido - Violaciones: " + violations.size());
        assert violations.isEmpty() : "ContactRequest v√°lido no deber√≠a tener violaciones";

        // === TEST 2: Nombre vac√≠o ===
        ContactRequest invalidName = new ContactRequest();
        invalidName.setName(""); // Inv√°lido
        invalidName.setEmail("bax6351@gmail.com"); // ‚úÖ Email real
        invalidName.setPhone("644023859"); // ‚úÖ M√≥vil real

        violations = validator.validate(invalidName);
        System.out.println("‚ùå Nombre vac√≠o - Violaciones: " + violations.size());
        violations.forEach(v -> System.out.println("   " + v.getPropertyPath() + ": " + v.getMessage()));
        assert !violations.isEmpty() : "Nombre vac√≠o deber√≠a ser inv√°lido";

        // === TEST 3: Email inv√°lido ===
        ContactRequest invalidEmail = new ContactRequest();
        invalidEmail.setName("Test User");
        invalidEmail.setEmail("email-invalido"); // Inv√°lido
        invalidEmail.setPhone("644023859"); // ‚úÖ M√≥vil real

        violations = validator.validate(invalidEmail);
        System.out.println("‚ùå Email inv√°lido - Violaciones: " + violations.size());
        violations.forEach(v -> System.out.println("   " + v.getPropertyPath() + ": " + v.getMessage()));
        assert !violations.isEmpty() : "Email inv√°lido deber√≠a ser inv√°lido";

        // === TEST 4: Tel√©fono inv√°lido ===
        ContactRequest invalidPhone = new ContactRequest();
        invalidPhone.setName("Test User");
        invalidPhone.setEmail("bryanoyonate07@gmail.com"); // ‚úÖ Email real
        invalidPhone.setPhone("123"); // Inv√°lido (muy corto)

        violations = validator.validate(invalidPhone);
        System.out.println("‚ùå Tel√©fono inv√°lido - Violaciones: " + violations.size());
        violations.forEach(v -> System.out.println("   " + v.getPropertyPath() + ": " + v.getMessage()));
        assert !violations.isEmpty() : "Tel√©fono inv√°lido deber√≠a ser inv√°lido";

        // === TEST 5: Validaci√≥n personalizada - sin canales de comunicaci√≥n ===
        ContactRequest noChannels = new ContactRequest();
        noChannels.setName("Test User");
        noChannels.setNotes("Usuario sin email ni tel√©fono");

        violations = validator.validate(noChannels);
        System.out.println("‚úÖ Sin canales - Violaciones Bean Validation: " + violations.size());

        // Probar validaci√≥n personalizada
        try {
            noChannels.validateContactChannels();
            System.out.println("‚ùå ERROR: Deber√≠a haber lanzado excepci√≥n");
            assert false : "Deber√≠a haber lanzado excepci√≥n para contacto sin canales";
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ Validaci√≥n personalizada funcion√≥: " + e.getMessage());
        }

        System.out.println("‚úÖ Test ContactRequest validaciones completado\n");
    }

    @Test
    public void testCategoryRequestValidations() {
        System.out.println("üß™ === TEST VALIDACIONES CategoryRequest ===");

        // === TEST 1: CategoryRequest v√°lido ===
        CategoryRequest validCategory = new CategoryRequest();
        validCategory.setName("Grupo de Pesca");
        validCategory.setDescription("Aficionados a la pesca deportiva");

        Set<ConstraintViolation<CategoryRequest>> violations = validator.validate(validCategory);
        System.out.println("‚úÖ CategoryRequest v√°lido - Violaciones: " + violations.size());
        assert violations.isEmpty() : "CategoryRequest v√°lido no deber√≠a tener violaciones";

        // === TEST 2: Nombre vac√≠o ===
        CategoryRequest invalidName = new CategoryRequest();
        invalidName.setName(""); // Inv√°lido
        invalidName.setDescription("Descripci√≥n v√°lida");

        violations = validator.validate(invalidName);
        System.out.println("‚ùå Nombre vac√≠o - Violaciones: " + violations.size());
        violations.forEach(v -> System.out.println("   " + v.getPropertyPath() + ": " + v.getMessage()));
        assert !violations.isEmpty() : "Nombre vac√≠o deber√≠a ser inv√°lido";

        // === TEST 3: Descripci√≥n muy larga ===
        CategoryRequest longDescription = new CategoryRequest();
        longDescription.setName("Categor√≠a v√°lida");
        longDescription.setDescription("A".repeat(400)); // Excede 300 caracteres

        violations = validator.validate(longDescription);
        System.out.println("‚ùå Descripci√≥n larga - Violaciones: " + violations.size());
        violations.forEach(v -> System.out.println("   " + v.getPropertyPath() + ": " + v.getMessage()));
        assert !violations.isEmpty() : "Descripci√≥n muy larga deber√≠a ser inv√°lida";

        // === TEST 4: Subcategor√≠a v√°lida ===
        CategoryRequest subcategory = new CategoryRequest();
        subcategory.setName("Pesca de R√≠o");
        subcategory.setDescription("Especializada en pesca fluvial");
        subcategory.setParentId(1L);

        violations = validator.validate(subcategory);
        System.out.println("‚úÖ Subcategor√≠a v√°lida - Violaciones: " + violations.size());
        System.out.println("‚úÖ Es subcategor√≠a: " + subcategory.isSubcategory());
        assert violations.isEmpty() : "Subcategor√≠a v√°lida no deber√≠a tener violaciones";

        System.out.println("‚úÖ Test CategoryRequest validaciones completado\n");
    }

    @Test
    public void testCategoryMessageRequestValidations() {
        System.out.println("üß™ === TEST VALIDACIONES CategoryMessageRequest ===");

        // === TEST 1: Mensaje v√°lido ===
        CategoryMessageRequest validMessage = new CategoryMessageRequest();
        validMessage.setSubject("Convocatoria de Pesca");
        validMessage.setContent("Salida programada para el s√°bado a las 6:00 AM");
        validMessage.setSendEmail(true);
        validMessage.setSendSms(false);

        Set<ConstraintViolation<CategoryMessageRequest>> violations = validator.validate(validMessage);
        System.out.println("‚úÖ Mensaje v√°lido - Violaciones: " + violations.size());
        assert violations.isEmpty() : "Mensaje v√°lido no deber√≠a tener violaciones";

        // === TEST 2: Contenido vac√≠o ===
        CategoryMessageRequest emptyContent = new CategoryMessageRequest();
        emptyContent.setSubject("Asunto v√°lido");
        emptyContent.setContent(""); // Inv√°lido
        emptyContent.setSendEmail(true);

        violations = validator.validate(emptyContent);
        System.out.println("‚ùå Contenido vac√≠o - Violaciones: " + violations.size());
        violations.forEach(v -> System.out.println("   " + v.getPropertyPath() + ": " + v.getMessage()));
        assert !violations.isEmpty() : "Contenido vac√≠o deber√≠a ser inv√°lido";

        // === TEST 3: Asunto muy largo ===
        CategoryMessageRequest longSubject = new CategoryMessageRequest();
        longSubject.setSubject("A".repeat(250)); // Excede 200 caracteres
        longSubject.setContent("Contenido v√°lido");
        longSubject.setSendEmail(true);

        violations = validator.validate(longSubject);
        System.out.println("‚ùå Asunto largo - Violaciones: " + violations.size());
        violations.forEach(v -> System.out.println("   " + v.getPropertyPath() + ": " + v.getMessage()));
        assert !violations.isEmpty() : "Asunto muy largo deber√≠a ser inv√°lido";

        // === TEST 4: Sin canales seleccionados ===
        CategoryMessageRequest noChannels = new CategoryMessageRequest();
        noChannels.setSubject("Asunto v√°lido");
        noChannels.setContent("Contenido v√°lido");
        noChannels.setSendEmail(false);
        noChannels.setSendSms(false);

        violations = validator.validate(noChannels);
        System.out.println("‚ùå Sin canales - Violaciones: " + violations.size());
        violations.forEach(v -> System.out.println("   " + v.getPropertyPath() + ": " + v.getMessage()));
        assert !violations.isEmpty() : "Sin canales deber√≠a ser inv√°lido";

        // === TEST 5: M√©todos de conveniencia ===
        CategoryMessageRequest allChannels = new CategoryMessageRequest();
        allChannels.setSendEmail(true);
        allChannels.setSendSms(true);

        System.out.println("‚úÖ Enviar a todos los canales: " + allChannels.shouldSendToAllChannels());
        assert allChannels.shouldSendToAllChannels() : "Deber√≠a enviar a todos los canales";

        System.out.println("‚úÖ Test CategoryMessageRequest validaciones completado\n");
    }

    @Test
    public void testAllDTOsIntegration() {
        System.out.println("üöÄ === TEST INTEGRACI√ìN TODOS LOS DTOs ===");

        // Crear objetos v√°lidos de todos los DTOs (EMAILS Y M√ìVIL REALES)
        ContactRequest contact = new ContactRequest("Juan Pescador", "rybantfg@gmail.com", "644023859", null, "Pescador experto");
        CategoryRequest category = new CategoryRequest("Grupo de Pesca", "Aficionados a la pesca", null);
        CategoryMessageRequest message = new CategoryMessageRequest("Convocatoria", "Salida de pesca el s√°bado", true, true);

        // Validar todos
        Set<ConstraintViolation<ContactRequest>> contactViolations = validator.validate(contact);
        Set<ConstraintViolation<CategoryRequest>> categoryViolations = validator.validate(category);
        Set<ConstraintViolation<CategoryMessageRequest>> messageViolations = validator.validate(message);

        System.out.println("üìä Resultados de validaci√≥n:");
        System.out.println("  üë§ ContactRequest: " + contactViolations.size() + " violaciones");
        System.out.println("  üìÅ CategoryRequest: " + categoryViolations.size() + " violaciones");
        System.out.println("  üìß MessageRequest: " + messageViolations.size() + " violaciones");

        // Verificar validaciones personalizadas
        System.out.println("üîß Validaciones personalizadas:");
        System.out.println("  üë§ Contacto tiene canales v√°lidos: " + contact.hasValidContactInfo());
        System.out.println("  üìÅ Categor√≠a es subcategor√≠a: " + category.isSubcategory());
        System.out.println("  üìß Mensaje a todos los canales: " + message.shouldSendToAllChannels());

        // Assertions
        assert contactViolations.isEmpty() : "ContactRequest deber√≠a ser v√°lido";
        assert categoryViolations.isEmpty() : "CategoryRequest deber√≠a ser v√°lido";
        assert messageViolations.isEmpty() : "MessageRequest deber√≠a ser v√°lido";

        System.out.println("‚úÖ Integraci√≥n de todos los DTOs exitosa");
        System.out.println("üéâ ¬°Estructura de DTOs lista para producci√≥n!");
    }
}