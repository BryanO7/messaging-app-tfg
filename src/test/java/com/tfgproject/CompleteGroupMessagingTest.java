// src/test/java/com/tfgproject/CompleteGroupMessagingTest.java
package com.tfgproject;

import com.tfgproject.domain.model.Category;
import com.tfgproject.domain.model.Contact;
import com.tfgproject.domain.service.CategoryService;
import com.tfgproject.domain.service.ContactService;
import com.tfgproject.infrastructure.service.AsyncMessagePublisher;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestPropertySource;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import static com.tfgproject.TestConstants.*; // ‚úÖ Importar constantes

@SpringBootTest
@TestPropertySource(locations = "classpath:application-test.properties") // ‚úÖ Usar perfil de test
public class CompleteGroupMessagingTest {
    private static final Logger logger = LoggerFactory.getLogger(CompleteGroupMessagingTest.class);

    @Autowired
    private CategoryService categoryService;

    @Autowired
    private ContactService contactService;

    @Autowired
    private AsyncMessagePublisher messagePublisher;

    @Test
    public void testCompleteGroupMessagingFlow() throws InterruptedException {
        printTestHeader("TEST COMPLETO: GRUPO DE PESCA CON DATOS REALES");
        System.out.println("üìã Demostrando tu funcionalidad exacta:");
        System.out.println("  1. Crear categor√≠a 'Grupo de Pesca'");
        System.out.println("  2. Agregar contactos al grupo");
        System.out.println("  3. Enviar mensaje al grupo (email + SMS)");
        System.out.println("  4. Verificar que todos reciben el mensaje");

        // === PASO 1: CREAR CATEGOR√çA "GRUPO DE PESCA" ===
        System.out.println("\n1Ô∏è‚É£ === CREANDO GRUPO DE PESCA ===");

        Category grupoPesca;
        try {
            // Intentar crear la categor√≠a
            grupoPesca = categoryService.createCategory(
                    "Grupo de Pesca Test",
                    "Grupo para pruebas de mensajer√≠a a pescadores",
                    null
            );
            System.out.println("‚úÖ Categor√≠a creada: " + grupoPesca.getName());
            System.out.println("üìÅ ID de categor√≠a: " + grupoPesca.getId());
        } catch (Exception e) {
            // Si ya existe, buscarla
            System.out.println("‚ö†Ô∏è Categor√≠a ya existe, buscando...");
            List<Category> categories = categoryService.searchCategories("Grupo de Pesca");
            if (!categories.isEmpty()) {
                grupoPesca = categories.get(0);
                System.out.println("‚úÖ Categor√≠a encontrada: " + grupoPesca.getName());
            } else {
                throw new RuntimeException("No se pudo crear ni encontrar la categor√≠a");
            }
        }

        // === PASO 2: AGREGAR CONTACTOS AL GRUPO ===
        System.out.println("\n2Ô∏è‚É£ === AGREGANDO PESCADORES AL GRUPO ===");

        // Verificar si ya existen contactos o crearlos (USANDO CONSTANTES)
        Contact pescador1 = crearOEncontrarContacto("Juan el Pescador", EMAIL_1, SPANISH_MOBILE);
        Contact pescador2 = crearOEncontrarContacto("Mar√≠a la Pescadora", EMAIL_2, null);
        Contact pescador3 = crearOEncontrarContacto("Carlos el Capit√°n", EMAIL_3, null);

        System.out.println("üë• Contactos preparados:");
        System.out.println("  üé£ " + pescador1.getName() + " - " + pescador1.getEmail() + " - " + pescador1.getPhone());
        System.out.println("  üé£ " + pescador2.getName() + " - " + pescador2.getEmail() + " - " + pescador2.getPhone());
        System.out.println("  üé£ " + pescador3.getName() + " - " + pescador3.getEmail() + " - " + pescador3.getPhone());

        // Agregar contactos a la categor√≠a
        try {
            contactService.addContactToCategory(pescador1.getId(), grupoPesca.getId());
            contactService.addContactToCategory(pescador2.getId(), grupoPesca.getId());
            contactService.addContactToCategory(pescador3.getId(), grupoPesca.getId());
            System.out.println("‚úÖ Contactos agregados al Grupo de Pesca");
        } catch (Exception e) {
            System.out.println("        ‚ö†Ô∏è Algunos contactos ya estaban en el grupo: " + e.getMessage());
        }

        // Verificar contactos en la categor√≠a
        List<Contact> contactosEnGrupo = contactService.getContactsByCategory(grupoPesca.getId());
        System.out.println("üë• Total contactos en Grupo de Pesca: " + contactosEnGrupo.size());

        if (contactosEnGrupo.isEmpty()) {
            System.out.println("‚ö†Ô∏è No hay contactos en el grupo, saltando resto del test");
            printTestFooter();
            return;
        }

        // === PASO 3: OBTENER CANALES DE COMUNICACI√ìN ===
        System.out.println("\n3Ô∏è‚É£ === OBTENIENDO CANALES DE COMUNICACI√ìN ===");

        Set<String> emails = categoryService.getAllEmailsFromCategory(grupoPesca.getId());
        Set<String> phones = categoryService.getAllPhonesFromCategory(grupoPesca.getId());

        System.out.println("üìß Emails disponibles (" + emails.size() + "):");
        emails.forEach(email -> System.out.println("  üìß " + email));

        System.out.println("üì± Tel√©fonos disponibles (" + phones.size() + "):");
        phones.forEach(phone -> System.out.println("  üì± " + phone));

        if (emails.isEmpty() && phones.isEmpty()) {
            System.out.println("‚ùå ERROR: No hay canales de comunicaci√≥n disponibles");
            return;
        }

        // === PASO 4: ENVIAR MENSAJE AL GRUPO POR EMAIL ===
        System.out.println("\n4Ô∏è‚É£ === ENVIANDO MENSAJE AL GRUPO POR EMAIL ===");

        if (!emails.isEmpty()) {
            String emailMessageId = messagePublisher.broadcastMessage(
                    emails.stream().toList(),
                    getTestMessage(FISHING_GROUP_MESSAGE), // ‚úÖ Usar constante con timestamp
                    getTestSubject("Convocatoria Grupo de Pesca - Salida S√°bado") // ‚úÖ Usar constante
            );

            System.out.println("üìß Mensaje de email enviado a " + emails.size() + " pescadores");
            System.out.println("üìß ID del mensaje: " + emailMessageId);
        }

        // === PASO 5: ENVIAR MENSAJE AL GRUPO POR SMS ===
        System.out.println("\n5Ô∏è‚É£ === ENVIANDO MENSAJE AL GRUPO POR SMS ===");

        if (!phones.isEmpty()) {
            System.out.println("üì± Enviando SMS a " + phones.size() + " pescadores:");

            int smsCount = 0;
            for (String phone : phones) {
                String smsId = messagePublisher.sendSmsToQueue(
                        phone,
                        getTestMessage(SMS_SHORT_MESSAGE), // ‚úÖ Usar constante con timestamp
                        TEST_SENDER // ‚úÖ Usar constante
                );
                System.out.println("  üì± SMS " + (++smsCount) + " enviado a " + phone + " (ID: " + smsId + ")");

                // Peque√±a pausa entre SMS para no saturar
                TimeUnit.SECONDS.sleep(1);
            }

            System.out.println("‚úÖ Total SMS enviados: " + smsCount);
        }

        // === PASO 6: MOSTRAR ESTAD√çSTICAS FINALES ===
        System.out.println("\n6Ô∏è‚É£ === ESTAD√çSTICAS FINALES ===");

        Map<String, Object> stats = categoryService.getCategoryStats(grupoPesca.getId());

        System.out.println("üìä ESTAD√çSTICAS DEL GRUPO DE PESCA:");
        System.out.println("  üë• Total contactos: " + stats.get("totalContacts"));
        System.out.println("  üìß Con email: " + stats.get("contactsWithEmail"));
        System.out.println("  üì± Con tel√©fono: " + stats.get("contactsWithPhone"));
        System.out.println("  üìÅ Subcategor√≠as: " + stats.get("subcategories"));

        System.out.println("\nüéâ === FUNCIONALIDAD COMPLETADA ===");
        System.out.println("‚úÖ Categor√≠a 'Grupo de Pesca' creada");
        System.out.println("‚úÖ Contactos agregados al grupo");
        System.out.println("‚úÖ Mensaje enviado por email a todos");
        System.out.println("‚úÖ Mensaje enviado por SMS a todos");
        System.out.println("‚úÖ Datos guardados en base de datos");

        System.out.println("\nüì± VERIFICA TUS MENSAJES:");
        System.out.println("üìß Emails: " + String.join(", ", ALL_TEST_EMAILS));
        System.out.println("üì± SMS: " + SPANISH_MOBILE + " (solo Juan tiene m√≥vil)");

        printTestFooter(); // ‚úÖ Usar m√©todo de constantes

        System.out.println("\nüîó ENDPOINTS PARA FRONTEND:");
        System.out.println("  GET /api/categories - Ver todas las categor√≠as");
        System.out.println("  GET /api/categories/" + grupoPesca.getId() + "/with-contacts - Ver grupo con contactos");
        System.out.println("  POST /api/categories/" + grupoPesca.getId() + "/send-message - Enviar mensaje al grupo");
        System.out.println("  GET /api/categories/" + grupoPesca.getId() + "/stats - Ver estad√≠sticas del grupo");

        // Assertions para el test
        assert !emails.isEmpty() || !phones.isEmpty() : "Deber√≠a haber canales de comunicaci√≥n disponibles";
        assert contactosEnGrupo.size() >= 3 : "Deber√≠a haber al menos 3 contactos en el grupo";
    }

    // M√©todo auxiliar mejorado para crear o encontrar contactos
    private Contact crearOEncontrarContacto(String nombre, String email, String phone) {
        try {
            // Intentar crear el contacto
            return contactService.createContact(nombre, email, phone, null, "Miembro del grupo de pesca");
        } catch (IllegalArgumentException e) {
            // Si ya existe, buscarlo
            if (e.getMessage().contains("Ya existe un contacto")) {
                logger.info("‚ö†Ô∏è Contacto ya existe, buscando: {}", email != null ? email : phone);

                // Buscar por email primero
                if (email != null) {
                    List<Contact> contactos = contactService.searchContacts(email);
                    if (!contactos.isEmpty()) {
                        Contact found = contactos.get(0);
                        logger.info("‚úÖ Contacto encontrado por email: {} (ID: {})", found.getName(), found.getId());
                        return found;
                    }
                }

                // Buscar por tel√©fono si no se encontr√≥ por email
                if (phone != null) {
                    List<Contact> contactos = contactService.searchContacts(phone);
                    if (!contactos.isEmpty()) {
                        Contact found = contactos.get(0);
                        logger.info("‚úÖ Contacto encontrado por tel√©fono: {} (ID: {})", found.getName(), found.getId());
                        return found;
                    }
                }

                // Buscar por nombre como √∫ltimo recurso
                List<Contact> contactos = contactService.searchContacts(nombre);
                if (!contactos.isEmpty()) {
                    Contact found = contactos.get(0);
                    logger.info("‚úÖ Contacto encontrado por nombre: {} (ID: {})", found.getName(), found.getId());
                    return found;
                }
            }

            throw new RuntimeException("No se pudo crear ni encontrar el contacto: " + nombre + " (" + email + ")", e);
        }
    }

    @Test
    public void testCreateNewCategoryAndAddContacts() {
        System.out.println("üÜï === TEST CREAR NUEVA CATEGOR√çA DESDE CERO ===");

        String timestamp = String.valueOf(System.currentTimeMillis()).substring(8);
        String categoryName = "Grupo Test " + timestamp;

        // Crear nueva categor√≠a
        Category nuevaCategoria;
        try {
            nuevaCategoria = categoryService.createCategory(
                    categoryName,
                    "Categor√≠a de prueba para testing",
                    null
            );
            System.out.println("‚úÖ Nueva categor√≠a creada: " + nuevaCategoria.getName());
        } catch (IllegalArgumentException e) {
            System.out.println("‚ö†Ô∏è Categor√≠a ya existe, buscando...");
            List<Category> categories = categoryService.searchCategories(categoryName);
            nuevaCategoria = categories.isEmpty() ?
                    categoryService.getAllCategories().get(0) : categories.get(0);
        }

        System.out.println("üìÅ ID: " + nuevaCategoria.getId());

        // Crear contacto con email √∫nico para evitar duplicados
        String uniqueEmail = "test" + timestamp + "@tempmail.org";
        String uniquePhone = "600" + timestamp.substring(0, 6);

        Contact contacto1;
        try {
            contacto1 = contactService.createContact(
                    "Test User " + timestamp,
                    uniqueEmail,
                    uniquePhone,
                    null,
                    "Contacto de prueba"
            );
            System.out.println("‚úÖ Contacto creado: " + contacto1.getName());
        } catch (IllegalArgumentException e) {
            // Si falla, usar uno de los contactos existentes
            System.out.println("‚ö†Ô∏è Usando contacto existente");
            List<Contact> existing = contactService.getAllContacts();
            contacto1 = existing.isEmpty() ?
                    crearOEncontrarContacto("Contacto Prueba", EMAIL_1, null) :
                    existing.get(0);
        }

        // Agregar a la categor√≠a
        try {
            contactService.addContactToCategory(contacto1.getId(), nuevaCategoria.getId());
            System.out.println("‚úÖ Contacto agregado a la categor√≠a");
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è Contacto ya estaba en la categor√≠a: " + e.getMessage());
        }

        // Verificar
        List<Contact> contactosEnCategoria = contactService.getContactsByCategory(nuevaCategoria.getId());
        System.out.println("üë• Contactos en nueva categor√≠a: " + contactosEnCategoria.size());

        // Enviar mensaje de prueba solo si hay contactos
        if (!contactosEnCategoria.isEmpty()) {
            Set<String> emails = categoryService.getAllEmailsFromCategory(nuevaCategoria.getId());
            if (!emails.isEmpty()) {
                String messageId = messagePublisher.broadcastMessage(
                        emails.stream().toList(),
                        "Mensaje de prueba para la nueva categor√≠a " + categoryName,
                        "Test de nueva categor√≠a"
                );
                System.out.println("üìß Mensaje enviado a nueva categor√≠a: " + messageId);
            }
        }

        System.out.println("‚úÖ Test de nueva categor√≠a completado");
    }

    @Test
    public void testHierarchicalCategories() {
        System.out.println("üå≥ === TEST CATEGOR√çAS JER√ÅRQUICAS ===");

        // Crear categor√≠a padre
        Category deportes = categoryService.createCategory("Deportes", "Actividades deportivas", null);

        // Crear subcategor√≠as
        Category pescaDeRio = categoryService.createCategory("Pesca de R√≠o", "Pesca en r√≠os", deportes.getId());
        Category pescaDeMar = categoryService.createCategory("Pesca de Mar", "Pesca marina", deportes.getId());

        System.out.println("üå≥ Estructura jer√°rquica creada:");
        System.out.println("  üìÅ " + deportes.getName() + " (ID: " + deportes.getId() + ")");
        System.out.println("    üìÇ " + pescaDeRio.getName() + " (ID: " + pescaDeRio.getId() + ")");
        System.out.println("    üìÇ " + pescaDeMar.getName() + " (ID: " + pescaDeMar.getId() + ")");

        // Crear contactos para subcategor√≠as (EMAILS REALES)
        Contact pescadorRio = contactService.createContact("R√≠o Pescador", "rybantfg@gmail.com", "644023859", null, "Especialista en r√≠o");
        Contact pescadorMar = contactService.createContact("Mar Pescador", "bax6351@gmail.com", null, null, "Especialista en mar");

        // Agregar a subcategor√≠as espec√≠ficas
        contactService.addContactToCategory(pescadorRio.getId(), pescaDeRio.getId());
        contactService.addContactToCategory(pescadorMar.getId(), pescaDeMar.getId());

        // Verificar que la categor√≠a padre incluye todos los contactos
        Set<String> emailsPadre = categoryService.getAllEmailsFromCategory(deportes.getId());
        Set<String> emailsRio = categoryService.getAllEmailsFromCategory(pescaDeRio.getId());
        Set<String> emailsMar = categoryService.getAllEmailsFromCategory(pescaDeMar.getId());

        System.out.println("üìß Emails en categor√≠a padre: " + emailsPadre.size());
        System.out.println("üìß Emails en pesca de r√≠o: " + emailsRio.size());
        System.out.println("üìß Emails en pesca de mar: " + emailsMar.size());

        // Enviar mensaje a toda la categor√≠a padre
        if (!emailsPadre.isEmpty()) {
            String messageId = messagePublisher.broadcastMessage(
                    emailsPadre.stream().toList(),
                    "Mensaje para todos los deportistas",
                    "Convocatoria general deportes"
            );
            System.out.println("üìß Mensaje enviado a toda la categor√≠a deportes: " + messageId);
        }

        System.out.println("‚úÖ Test de categor√≠as jer√°rquicas completado");
    }
}